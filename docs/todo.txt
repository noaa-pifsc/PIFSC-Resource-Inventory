X copy the ODS docker documentation
X 	X revoke API key and save blank API key in the config
	X add in the API key to documentation setup instructionX s

	X copy/modify ODS docker X technical/X user documentation
	X update GIM documeX ntation
	X update RIA documentation

	X develop test deployment scripts
		X test on ahi

	X develop prod deployment scripts
		X test on PICV014 and ahi

	X merge squash commit
	X push and tag code

	_ document docker best practices
		deployment scripts to setup project structure the way you want in docker, then copy them over in dockerfile (split into front end: www and backend folders)

X tag merged revision (v 1.0 for RIA and GIM and docker project)

X Update documentation:
	X DB
	X DB diagram
	X DB naming conventions
	X DFD


	testing:
		XXXXX dev
			XXXXX check web app
			XXXXX check cron job
			XXXXX deployed to PICV014 with 6:30 AM cron job
		X dev (bind mount)
			X check web app
			X check cron job (does not work and throws an error: Could not open input file: /usr/src/PRI/GIM/retrieve_gitlab_info.php - this could be a permissions problem)
		XXXXX test
			XXXXX check web app
			XXXXX check cron job
			XXXXX deployed to ahi with 6:00 AM cron job
		X prod (ahi connecting to PICT)
			X check web app
			X check cron job


(To Do) X version 1.1:
	X remove the "PRI." prefix on the DB references in PRI_gitlab.php and confirm the synonyms work properly
	bugs:
		X (content security policy - updated in httpd.x.conf) why are the gitlab images not rendering in the web app - no login required for most repositories?

(To Do) X version 1.2:
	X throw an error if the gitlab API key is not defined
	X set keepalive in the http configuration for performance reasons
	X ajax request not working on resource page (updated to not convert ajax response content to json format since it is now explicitly sent as JSON via PHP based on HTTP headers)
		parsing error: change the PICV014 and ahi instances to point to the same DB and check if the same issue is happening (compare the json directly)
		tried to set header to json before sending json content in view_all_x.php
	X filter resources button is not aligned properly in PICV014 (defined padding and overflow-y: hidden)
	X allow https://secure.gravatar.com images for the content security policy

(To Do) _ version 1.3:
	when a field is blank the javascript shows it as "null" but the initial web application load shows a blank (change the javascript to change null to blank)
	resolve flash of unstyled content issue when page first loads (show the loading graphic as soon as the animated gif has loaded otherwise keep the main div hidden or just show "Please wait" until the styling has been loaded

(To Do) production deployment:
	create JIRA ticket for the new DB schemas (PRI, PRI_GIM_APP, PRI_RIA_APP)
		temporary create synonym system privilege for PRI_GIM_APP and PRI_RIA_APP schemas
	fill out SCR for the production deployment
	create JIRA ticket for SCR
	production deployment
	update documentation
	pau

copy files without Filezilla:
	scp -rp C:\docker\pirri\* jabdul@ahi.pifsc.gov:/tmp/jabdul


	X document the web application features (filtering, and ajax requests/responses)


X implemented projects link does not go to the corresponding project (it goes to the associated project - change the link IDs)

X Compile SOP for how to prepare your project for inclusion into the inventory
	Project:
		X Update to public
	Resource:
		X Create JSON file w/ naming convention, etc. using the Excel template and JSON templates (X develop a short SOP for this)
		X Tag your repository with all modules installed

	X (Resource Definition SOP) add information about validating the JSON config files with the JSON template definition

	X dev/test background
	Index page should have simple dashboard reports available (summary of number of projects, resources, groups)
		** Don't spend too much time on this until the data model is updated to allow many-to-many relationship between resource scopes and types
		Queries:
		select PROJ_VISIBILITY, count(*) from pri_proj where PROJ_VISIBILITY <> 'private' group by PROJ_VISIBILITY;
		select RES_SCOPE_NAME, RES_CATEGORY, count(*) from PRI_PROJ_V where PROJ_VISIBILITY <> 'private' AND RES_ID IS NOT NULL group by RES_CATEGORY, RES_SCOPE_NAME order by RES_SCOPE_NAME, RES_CATEGORY;


X separate out the PHP include files into the file system instead of accessible directly via the web browser

_ deploy to test docker container



	_ document the dev.mount.yml file as the bind mount version to allow changes to be made on the fly without having to rebuild the image repetitively
		_ create a deployment script to use the bind mounts to make it easier to switch between the two versions

_ compile the docker documentation based on ODS docker implementation
X implement an index.php page for the default (simple summary page placeholder for now)
_ implement cron job for git data refresh
_ implement on demand web request for the data to be refreshed (don't wait for it, just say it needs to be refreshed - please be patient - a couple of minutes)
_ implement github with their API and URLs
_ loading graphic when the page is loaded from initialization to response


X Add "tag your repository" language to the Code Commit SOP for installing/implementing/upgrading resources

X Decided to implement separate view_X.php pages due to the complications with filtering, _ ** update view_X.php pages with additional detailed information for projects/resources not shown on the view_all_X.php pages
	** instead of developing separate pages for the view single resources/project view we can just use anchors by the RES_ID or by PROJ_ID (can also auto generate a non-numeric key for the anchor too based on the PK value)
		X we would need to adjust the filtering based on if there are arguments to the page (need to think about this more)


X ** allow filtering on data source name too


** more gitlab fields:
	get owner object information
	X created_at
	X last_activity_at
	X creator_id
	X web_url

	X open_issues_count

	X statistics
		X commit_count
		X repository_size



	do I need to pull the user list as well and store it locally so we can maintain the relationships between owners and projects?

X implement background image from AAM APEX app



X view all resources
	X change the Associated Projects column to "Implemented Projects"

_ (documented) add web app to Google Site:
	<embed src="http://localhost/pifsc-resource-inventory/RIA/application_code/view_all_projects.php" style="width: 100%; height: 500px;">


_ (documented) update the code so it doesn't exit on SQL error (rollback specific transaction and log issue but don't stop processing immediately)


X projects layout needs to have margin/padding addressed before implementing the resources layout

X Also add the view resource and view project pages


X add a navigation menu to allow users to return to the view all resources or view all projects pages (default to projects)


_ (documented) ** optimize the queries, getting the maximum version number is very inefficient

_ (documented) pull the resource description from the Overview section of the referenced file (only if it is in .md format)?

X show a default (no image available when there is no AVATAR_URL specified)

_ (documented) pull other information from the readme.md file

_ (documented) user notification functionality?
	? Maybe allow users to subscribe to updates on a project and when a new version is defined it could email the users

_ (documented) add a production flag to resources to indicate they have been deployed/marked for production use
	_ (documented) there should be a distinction between if a given soln is implemented or just installed (e.g. folks who use the template application will have the DVM installed by default but may not actually be using it -> e.g Personnel Tracking System)

_ (documented) **naming conventions should be handled to escape special characters when used in regular expressions

X implement tooltips for each field in the projects/resources page

X implement the json config files to indicate special resources for the given project

	X Oracle function to extract the version number using regexp
	X Oracle function to extract the major and minor version numbers using the naming convention
		X establish the general naming convention (e.g. [prefix]_vX.X.X.X...) but we can allow folks to define their own prefix including the "_v" or "_v_" or whatever they prefer for flexibility

		Or just allow them to define their own regexp?


*X document algorithm for assigning a version number score to a given version number string
	* X Parse the period-delimited numeric string into separate numbers.  Depending on the occurrence of the numeric string the number is multiplied by 1000 to the occurrence number (starting at 0) to the total score.  This allows three digit numbers for each major, minor, patch, etc. number to be sorted correctly.

X implement a simple form interface to allow filtering and ajax content to be refreshed (maybe just specify the data as JSON from the queries and have javascript generate the formatted HTML and update the DOM with the content)

X change DM (data management) to DS (data stewardship) to align with DG program





_ implement more resources:
	X PARR tools (BDM, PARR dashboard, DB)
	Data integration
	X Cruise data integration SOP (link it to the implementation of the CEN_CRUISE schema)
	X NCEI tools
	X APEX tools (security documentation and error handler)
	data enterprise (DLC diagrams and operating model)
	GitHub Tools
	_ data dissemination tools
	PIFSC Info
	GitHub Template


	X ** implement tags for all projects that utilize the DDL helper

	X retrieve more information from the API (like top contributor, last contributor, project owner, etc.)
		first commit/last commit
		last update
		last contributor
		number of commits
		owner


X generate comma-delimited list of Resource Name - Version #, Resource Name - Version #, ...
	--we want to be able to identify each instance of the defined resources that are installed/required for a given project
		We need to do a join on the regexp for the naming convention and then match that up with the associated tags for the given project -> we need to take the max of each to ensure we are displaying the highest version of each installed module (this will help folks to understand how a given module version was installed in different projects)
	generate an HTML-formatted one and one for DB result sets

	QUERY LOGIC:
		X Join every project to all the resources on the regexp (excluding the projects associated with the resource) and pull the max parsed version number of each one.
	X (No, these views have different logic) rename the two sets of views since they are similar (one is for the resources themselves and the other is for the projects with associated resources) -> maybe we can combine them and in one query we just filter out the project recs by RES_ID IS NOT NULL?


	X What information do we want to pull for each project and associated tags? (resource versions)
		X We want to know the highest version of the resource within the project as well as the highest version of the resource within external projects

		X We need to join the resources table with the tags table to match up the regular expressions

		X **determine the highest version at the resource level and then re-join with the projects/tags on the regexp to parse out the highest version of those as well


		** We want to be able to pull information from both sides of the relationship.
			X all of the projects and their associated resources and all projects that use each of those resources (full result set as well as delimited lists)

			X all of the projects and installed/required resources (include the version number of the resource implemented for each of the projects) - we would also want to know what the maximum version of the resource currently is and if the maximum version is higher than the installed version (maybe show an asterisk or use "(UA)" in the interface to show an upgrade is available)



			X query for the projects (left outer join on resources to list project-specific resources)
				X inner join on resources to get all installed/required resources
			X detailed and summary view (comma-delimited lists or modules and version numbers)


For resource report:
Maybe just show the resources (not projects and resources - INNER JOIN)

For project report:
Show each project and associated tagged resources as well associated resources?



** (_reuse some of this content where appropriate) Data App Gallery Project Specifications (deprecated project superseded by PRI)
	Overview:
	PIFSC has developed various software modules and applications over the years to satisfy a variety of data needs.  Some of this software could be suitable for other research groups and projects within the Center but this information is not readily available.  It is important for PIFSC staff to be aware of existing software solutions to ensure valuable development time is not being spent on redeveloping similar solutions when it could be used improving existing software instead.  The Data App Gallery web application will allow users to browse and search through a list of applications and modules that will satisfy a given data project's needs (e.g. data management, data QC, data dissemination) to get more information, access the code repository, and access a live demo of the given software to evaluate if it is suitable for their needs.

	README:
		This project will provide PIFSC staff a gallery of data applications and modules that are currently in use or available at PIFSC.  The application will feature a searchable interface to find different types of applications and modules that will satisfy a given data project's needs (e.g. data management interface, data QC, data dissemination, etc.).  Features include a demo link, screenshots, how-to videos, version control URL, etc.  This application will help to inform PIFSC data projects of what is already available for use so we are not re-developing the same modules/functionality that is already available or could be modified to satisfy a given data project's needs.  This application could also include standards, best practices, SOPs, etc. in subsequent development phases

	Project Phases:
	•	Build prototype in HTML/JS (recommend jQuery UI framework and plugins)
	•	Build DB for required data elements
	•	Import data into DB for required data elements (test data)
	•	Generate HTML using PHP or other server side language
	•	Insert/Update/Delete functionality for DB using PHP or other server side language
	•	Login functionality for IUD functionality


	Required Data Elements:
	•	Apps/Modules:
	•	App/Module Type:
	•	Resources (links to videos/images)

	Features:
	•	Sorting
	•	Filtering
	•	Browsing
	•	Tagging


	GitLab info:
		This web application provides PIFSC staff a gallery of data applications and modules that are currently in use or available at PIFSC.  The application will feature a searchable interface to find different types of applications and modules

	-- how are we going to

Pull information from README




Data/Software Project Inventory (from Google Keep: "Data/Software Project Inventory")
	X Standardize tag names and README.md files so they can be harvested to populate a DB that can be used to update the central inventory. This can then be embedded in a web page or used in a variety of other ways to post this information
		e.g. DVM_db_v as a prefix and then parse the number and sort them accordingly to determine maximum version number
	X production URL
	X test/demo URL
	X version control URL (SSH and HTTPS)
	X Last Update
	X Review the GitLab repositories to determine if we can pull info via GitLab API
	X Review the GitLab repositories to see which are not in the Centralized Data Inventory
	X Look at the fields in the Data Projects Google Sheet and see if we can populate those reliably using the GitLab API or use PHP (cURL) to parse the readme.md file
	X Filter out based on private/open visibility
		Allow flags to be set to include the given repository in the inventory
	X Add a category tag so it shows if it's a Software Developer, Data Management Tool/SOP, etc.
	X Query the GitLab server for tags so we can tell which version is the most recent (may have to be manually defined/determined per project or a naming convention should be used - can parse for the version number and then sort it numerically to determine the most recent version)
	X Query the Git Lab server for each instance of a GitLab tag that matches a version of the given tag for a project (e.g. template application has version 1.0 of the DB version control module installed) - we could have a list of dependencies that people can see (color coded or other visual representation)
	X Can run reports and refresh the DB based on an update process that will parse the version numbers
	_ (documented) Use API to pull info from README.md file under specific pre-defined headings (e.g. current version number, summary, )
	X Pull project-specific information like the last update date/time, or last person
	X Eventually this can be a Oracle-based data system or we could use it as an opportunity to develop something else with MySQL/PHP or a different tech stack




Project Management Notes:
	Initial Development
		Feature issues

	X Initial Test platform deployment
		X Test DB deployment
			Execute test deployment scripts
		Test App deployment
			X PHP web app (docker)
			X PHP script deployment (linux cron job)

	X Testing
		X User acceptance Testing
		X Security Testing
		X SCR Review

	Initial Production platform deployment
		X Production DB deployment
			Execute test deployment scripts
		Production App deployment
			X PHP web app (docker)
			X PHP script deployment (linux cron job)
