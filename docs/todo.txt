_ Compile SOP for how to prepare your project for inclusion into the inventory
	Create JSON file w/ naming convention, etc.
	Update to public
	Tag your repository with all modules installed


_ pull the resource description from the Overview section of the referenced file (only if it is in .md format)?

_ pull other information from the readme.md file
	

_ add a production flag to resources to indicate they have been deployed/marked for production use

_ **naming conventions should be handled to escape special characters when used in regular expressions


implement the json config files to indicate special resources for the given project

	X Oracle function to extract the version number using regexp
	X Oracle function to extract the major and minor version numbers using the naming convention
		X establish the general naming convention (e.g. [prefix]_vX.X.X.X...) but we can allow folks to define their own prefix including the "_v" or "_v_" or whatever they prefer for flexibility

		Or just allow them to define their own regexp?


*_ document algorithm for assigning a version number score to a given version number string
	* Parse the period-delimited numeric string into separate numbers.  Depending on the occurrence of the numeric string the number is multiplied by 1000 to the occurrence number (starting at 0) to the total score.  This allows three digit numbers for each major, minor, patch, etc. number to be sorted correctly.






_ generate comma-delimited list of Resource Name - Version #, Resource Name - Version #, ...
	--we want to be able to identify each instance of the defined resources that are installed/required for a given project
		We need to do a join on the regexp for the naming convention and then match that up with the associated tags for the given project -> we need to take the max of each to ensure we are displaying the highest version of each installed module (this will help folks to understand how a given module version was installed in different projects)
	generate an HTML-formatted one and one for DB result sets

	QUERY LOGIC:
		Join every project to all the resources on the regexp (excluding the projects associated with the resource) and pull the max parsed version number of each one.
	_ rename the two sets of views since they are similar (one is for the resources themselves and the other is for the projects with associated resources) -> maybe we can combine them and in one query we just filter out the project recs by RES_ID IS NOT NULL?


	What information do we want to pull for each project and associated tags? (resource versions)
		We want to know the highest version of the resource within the project as well as the highest version of the resource within external projects

		We need to join the resources table with the tags table to match up the regular expressions and

		**determine the highest version at the resource level and then re-join with the projects/tags on the regexp to parse out the highest version of those as well


		** We want to be able to pull information from both sides of the relationship.
			all of the projects and their associated resources and all projects that use each of those resources (full result set as well as delimited lists)

			all of the projects and installed/required resources (include the version number of the resource implemented for each of the projects) - we would also want to know what the maximum version of the resource currently is and if the maximum version is higher than the installed version (maybe show an asterisk or use "(UA)" in the interface to show an upgrade is available)



			query for the projects (left outer join on resources to list project-specific resources)
				inner join on resources to get all installed/required resources
			detailed and summary view (comma-delimited lists or modules and version numbers)


For resource report:
Maybe just show the resources (not projects and resources - INNER JOIN)

For project report:
Show each project and associated tagged resources as well associated resources?



** (_reuse some of this content where appropriate) Data App Gallery Project Specifications (deprecated project superseded by PRI)
	Overview:
	PIFSC has developed various software modules and applications over the years to satisfy a variety of data needs.  Some of this software could be suitable for other research groups and projects within the Center but this information is not readily available.  It is important for PIFSC staff to be aware of existing software solutions to ensure valuable development time is not being spent on redeveloping similar solutions when it could be used improving existing software instead.  The Data App Gallery web application will allow users to browse and search through a list of applications and modules that will satisfy a given data project's needs (e.g. data management, data QC, data dissemination) to get more information, access the code repository, and access a live demo of the given software to evaluate if it is suitable for their needs.

	README:
		This project will provide PIFSC staff a gallery of data applications and modules that are currently in use or available at PIFSC.  The application will feature a searchable interface to find different types of applications and modules that will satisfy a given data project's needs (e.g. data management interface, data QC, data dissemination, etc.).  Features include a demo link, screenshots, how-to videos, version control URL, etc.  This application will help to inform PIFSC data projects of what is already available for use so we are not re-developing the same modules/functionality that is already available or could be modified to satisfy a given data project's needs.  This application could also include standards, best practices, SOPs, etc. in subsequent development phases

	Project Phases:
	•	Build prototype in HTML/JS (recommend jQuery UI framework and plugins)
	•	Build DB for required data elements
	•	Import data into DB for required data elements (test data)
	•	Generate HTML using PHP or other server side language
	•	Insert/Update/Delete functionality for DB using PHP or other server side language
	•	Login functionality for IUD functionality


	Required Data Elements:
	•	Apps/Modules:
	•	App/Module Type:
	•	Resources (links to videos/images)

	Features:
	•	Sorting
	•	Filtering
	•	Browsing
	•	Tagging


	GitLab info:
		This web application provides PIFSC staff a gallery of data applications and modules that are currently in use or available at PIFSC.  The application will feature a searchable interface to find different types of applications and modules

	-- how are we going to

Pull information from README




Data/Software Project Inventory (from Google Keep: "Data/Software Project Inventory")
	Standardize tag names and README.md files so they can be harvested to populate a DB that can be used to update the central inventory. This can then be embedded in a web page or used in a variety of other ways to post this information
	e.g. DVM_db_v as a prefix and then parse the number and sort them accordingly to determine maximum version number
	production URL
	test/demo URL
	version control URL (SSH and HTTPS)
	Last Update
	Review the GitLab repositories to determine if we can pull info via GitLab API
	Review the GitLab repositories to see which are not in the Centralized Data Inventory
	Look at the fields in the Data Projects Google Sheet and see if we can populate those reliably using the GitLab API or use PHP (cURL) to parse the readme.md file
	Filter out based on private/open visibility
	Allow flags to be set to include the given repository in the inventory
	Add a category tag so it shows if it's a Software Developer, Data Management Tool/SOP, etc.
	Query the GitLab server for tags so we can tell which version is the most recent (may have to be manually defined/determined per project or a naming convention should be used - can parse for the version number and then sort it numerically to determine the most recent version)
	Query the Git Lab server for each instance of a GitLab tag that matches a version of the given tag for a project (e.g. template application has version 1.0 of the DB version control module installed) - we could have a list of dependencies that people can see (color coded or other visual representation)
	Can run reports and refresh the DB based on an update process that will parse the
	Use API to pull info from README.md file under specific pre-defined headings (e.g. current version number, summary, )
	Pull project-specific information like the last update date/time, or last person
	Eventually this can be a Oracle-based data system or we could use it as an opportunity to develop something else with MySQL/PHP or a different tech stack
